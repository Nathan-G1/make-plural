import cardinalData from 'cldr-core/supplemental/plurals.json'
import ordinalData from 'cldr-core/supplemental/ordinals.json'
import expect from 'expect.js'

import MakePlural from 'make-plural-compiler/src/compiler'
import plurals from 'make-plural/umd/plurals'

MakePlural.load(cardinalData, ordinalData);

function testPluralData(type, lc) {
    var opt = { cardinals: (type == 'cardinal'), ordinals: (type == 'ordinal') };

    it('has autogenerated tests', function(){
        var mp;
        expect(mp = new MakePlural(lc, opt)).to.not.throwException();
        expect(mp._obj.tests[type]).to.not.be.empty();
    });

    it('is included in the output', function(){
        expect(plurals[lc]).to.be.a(Function);
    });

    var mp = new MakePlural(lc, opt);
    for (var cat in mp._obj.tests[type]) {
        describe(cat + ': ' + MakePlural.rules[type][lc]['pluralRule-count-' + cat], function(){
            (function (cat) {
                it('Live data', function() {
                    var test = mp._obj.tests.testCat.bind(mp._obj.tests);
                    expect(test).withArgs(type, cat).to.not.throwException();
                });
                it('Output', function() {
                    var test = mp._obj.tests.testCat.bind(mp._obj.tests);
                    expect(test).withArgs(type, cat, plurals[lc]).to.not.throwException();
                });
            })(cat);
        });
    }
}

describe('MakePlural data self-test', function(){
    describe('Cardinal rules', function(){
        for (var lc in cardinalData.supplemental['plurals-type-cardinal']) {
            describe(lc, function(){
                testPluralData('cardinal', lc);
            });
        }
    });

    describe('Ordinal rules', function(){
        for (var lc in ordinalData.supplemental['plurals-type-ordinal']) {
            describe(lc, function(){
                testPluralData('ordinal', lc);
            });
        }
    });
});
